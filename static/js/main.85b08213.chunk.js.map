{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["Header","className","src","alt","LinkButton","props","href","link","url","text","ImageDisplay","useState","counter","setCounter","useEffect","setInterval","imgIdx","images","length","onClick","map","image","idx","key","Card","post","hidden","setHidden","onMouseEnter","onMouseLeave","title","links","index","intro","Grid","posts","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wvLAgBA,SAASA,IACP,OACE,yBAAKC,UAAU,yCACb,yBAAKA,UAAU,mDAAmDC,IAAK,kBAAmBC,IAAI,KAC9F,yBAAKF,UAAU,mEAAf,iBAKN,SAASG,EAAWC,GAClB,OACE,uBAAGC,KAAMD,EAAME,KAAKC,KAClB,0BAAMP,UAAU,kIACbI,EAAME,KAAKE,OAMpB,SAASC,EAAaL,GAA8B,IAAD,EACnBM,mBAAS,GADU,mBAC1CC,EAD0C,KACjCC,EADiC,KAEjDC,qBAAU,WAAQC,aAAY,kBAAMF,EAAWD,EAAU,KAAI,OAAS,CAACA,IACvE,IAAMI,EAASJ,EAAUP,EAAMY,OAAOC,OACtC,OACE,yBAAKjB,UAAU,yBAAyBkB,QAAS,kBAAMN,EAAWD,EAAU,KACzEP,EAAMY,OAAOG,KAAI,SAACC,EAAOC,GAAR,OAChB,yBAAKpB,IAAKmB,EAAOlB,IAAKkB,EAAOpB,UAC3B,sEACCe,IAAWM,EAAM,cAAgB,aAAcC,IAAKD,QAK/D,SAASE,EAAKnB,GACZ,IAAMoB,EAAOpB,EAAMoB,KADgB,EAEPd,oBAAS,GAFF,mBAE5Be,EAF4B,KAEpBC,EAFoB,KAGnC,OACE,yBAAK1B,UAAU,oCAAoC2B,aAAc,kBAAMD,GAAU,IAAQE,aAAc,kBAAMF,GAAU,KACrH,kBAACjB,EAAD,CAAcO,OAAQQ,EAAKR,SAC3B,yBAAKhB,UAAU,aACb,yBAAKA,UAAU,0BAA0BwB,EAAKK,OAC7CL,EAAKM,MAAMX,KAAI,SAACb,EAAMyB,GAAP,OAAiB,kBAAC5B,EAAD,CAAYG,KAAMA,EAAMgB,IAAKS,OAC9D,uBAAG/B,UAAS,kCAA6ByB,EAAS,sBAAwB,KACvED,EAAKQ,SAOhB,SAASC,EAAK7B,GACZ,OACE,yBAAKJ,UAAU,kBACZI,EAAM8B,MAAMf,KACX,SAACK,EAAMO,GAAP,OACE,yBAAK/B,UAAU,oEAAoEsB,IAAKS,GACtF,kBAACR,EAAD,CAAMC,KAAMA,SAgBTW,MATf,WACE,OACE,yBAAKnC,UAAU,qBACb,kBAACD,EAAD,MACA,kBAACkC,EAAD,CAAMC,MAAOA,MCvECE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.85b08213.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport posts from \"./posts.json\"\n\ninterface Link {\n  text: string;\n  url: string;\n}\n\ninterface Post {\n  title: string;\n  images: string[];\n  intro: string;\n  body?: string;\n  links: Link[];\n}\n\nfunction Header() {\n  return (\n    <div className=\"bg-gray-800 overflow-hidden shadow-lg\">\n      <img className=\"inline-block text-gray-700 rounded-full w-20 m-4\" src={\"/img/avatar.jpg\"} alt=\"\" />\n      <div className=\"inline-block text-3xl text-gray-300 font-semibold px-4 py-2 m-2\">Axel Demborg</div>\n    </div>\n  )\n}\n\nfunction LinkButton(props: { link: Link }) {\n  return (\n    <a href={props.link.url}>\n      <span className=\"inline-block hover:bg-gray-700 bg-gray-200 rounded-full px-3 py-1 text-sm font-semibold hover:text-gray-200 text-gray-700 mr-2\">\n        {props.link.text}\n      </span>\n    </a>\n  )\n}\n\nfunction ImageDisplay(props: { images: string[] }) {\n  const [counter, setCounter] = useState(0)\n  useEffect(() => { setInterval(() => setCounter(counter + 1), 6000) }, [counter])\n  const imgIdx = counter % props.images.length\n  return (\n    <div className=\"relative w-full pt-1/1\" onClick={() => setCounter(counter + 1)}>\n      {props.images.map((image, idx) =>\n        <img src={image} alt={image} className={\n          \"absolute top-0 right-0 w-full transition duration-500 ease-in-out \" +\n          (imgIdx === idx ? \"opacity-100\" : \"opacity-0\")} key={idx} />)}\n    </div>\n  )\n}\n\nfunction Card(props: { post: Post }) {\n  const post = props.post\n  const [hidden, setHidden] = useState(true)\n  return (\n    <div className=\"rounded overflow-hidden shadow-lg\" onMouseEnter={() => setHidden(false)} onMouseLeave={() => setHidden(true)}>\n      <ImageDisplay images={post.images} />\n      <div className=\"px-6 py-4\">\n        <div className=\"font-bold text-xl mb-2\">{post.title}</div>\n        {post.links.map((link, index) => <LinkButton link={link} key={index} />)}\n        <p className={`text-gray-700 text-base ${hidden ? 'lg:hidden xl:hidden' : ''}`}>\n          {post.intro}\n        </p>\n      </div>\n    </div>\n  )\n}\n\nfunction Grid(props: { posts: Post[] }) {\n  return (\n    <div className=\"flex flex-wrap\">\n      {props.posts.map(\n        (post, index) =>\n          <div className=\"w-full sm:w-1/2 md:w-1/2 lg:w-1/3 xl:w-1/4 mb-4 hover:zoom-10 p-4\" key={index}>\n            <Card post={post} />\n          </div>\n      )}\n    </div>\n  )\n}\n\nfunction App() {\n  return (\n    <div className=\"container mx-auto\">\n      <Header />\n      <Grid posts={posts} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}