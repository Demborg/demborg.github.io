{"version":3,"sources":["img/avatar.jpg","img/cppn.png","img/sju_ars_lycka.jpg","img/raytrace.png","img/this_very_website.png","img/playlist.png","img/folding_desk.gif","img/color_organ.jpg","img/narcissus.gif","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Header","className","src","avatar","alt","React","Component","LinkButton","this","props","text","url","href","Card","title","image","intro","links","map","link","Grid","posts","post","App","narcissus","color_organ","folding_desk","playlist","this_very_website","sju_ars_lycka","cppn","raytrace","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9a205cdc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/avatar.d50c9485.jpg\";","module.exports = __webpack_public_path__ + \"static/media/cppn.4ce37009.png\";","module.exports = __webpack_public_path__ + \"static/media/sju_ars_lycka.d8a56cce.jpg\";","module.exports = __webpack_public_path__ + \"static/media/raytrace.b7face0f.png\";","module.exports = __webpack_public_path__ + \"static/media/this_very_website.a79701fe.png\";","module.exports = __webpack_public_path__ + \"static/media/playlist.0526350e.png\";","module.exports = __webpack_public_path__ + \"static/media/folding_desk.f46905bb.gif\";","module.exports = __webpack_public_path__ + \"static/media/color_organ.8811d99d.jpg\";","module.exports = __webpack_public_path__ + \"static/media/narcissus.9ab9d1bc.gif\";","import React from 'react';\nimport avatar from './img/avatar.jpg'\nimport cppn from './img/cppn.png'\nimport sju_ars_lycka from './img/sju_ars_lycka.jpg'\nimport raytrace from './img/raytrace.png'\nimport this_very_website from './img/this_very_website.png'\nimport playlist from './img/playlist.png'\nimport folding_desk from './img/folding_desk.gif'\nimport color_organ from './img/color_organ.jpg'\nimport narcissus from './img/narcissus.gif'\n\ninterface Link {\n  text: string;\n  url: string;\n}\n\ninterface Post {\n  title: string;\n  image: string;\n  intro: string;\n  body?: string;\n  links: Link[];\n}\n\ninterface Page {\n  posts: Post[];\n}\n\nclass Header extends React.Component {\n  render () {\n    return (\n    <div className=\"bg-gray-800 overflow-hidden shadow-lg\">\n      <img className=\"inline-block text-gray-700 rounded-full w-20 m-4\" src={avatar} alt=\"\"/>\n      <div className=\"inline-block text-3xl text-gray-300 font-semibold px-4 py-2 m-2\">Axel Demborg</div>\n    </div>\n    )\n  }\n}\n\nclass LinkButton extends React.Component<Link, {}> {\n  render () {\n    const {text, url} = this.props;\n    return (\n      <a href={url}>\n        <span className=\"inline-block hover:bg-gray-700 bg-gray-200 rounded-full px-3 py-1 text-sm font-semibold hover:text-gray-200 text-gray-700 mr-2\">{text}</span>\n      </a>\n    )\n  }\n}\n\nclass Card extends React.Component<Post, {}> {\n  render () {\n    const {title, image, intro, links} = this.props;\n    return (\n      <div className=\"rounded overflow-hidden shadow-lg\">\n        <img className=\"w-full\" src={image} alt={image}/>\n        <div className=\"px-6 py-4\">\n          <div className=\"font-bold text-xl mb-2\">{title}</div>\n          <p className=\"text-gray-700 text-base\">\n            {intro}\n          </p>\n        </div>\n        <div className=\"px-6 py-4\">\n          {links.map(link => <LinkButton text={link.text} url={link.url}/>)}\n        </div>\n      </div>\n    )\n  }\n}\n\nclass Grid extends React.Component<Page, {}> {\n  render () {\n    const {posts} = this.props\n    return (\n      <div className=\"flex flex-wrap\">\n        {posts.map(\n          post => \n        <div className=\"w-full sm:w-1/2 md:w-1/2 lg:w-1/3 xl:w-1/4 mb-4 hover:zoom-10 p-4\">\n          <Card title={post.title} image={post.image} intro={post.intro} links={post.links}/>\n        </div>\n          )}\n      </div>\n    )\n  }\n}\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"container mx-auto\">\n      <Header/>\n      <Grid posts={[\n        {\n          title: \"Project Narcissus\",\n          image: narcissus,\n          intro: \"Feeding my inner narcissist by training a VAE to generate selfies of myself\",\n          links: [{text: \"Try\", url: \"https://demborg.se/narcissus\"},  {text: \"Source\", url: \"https://github.com/Demborg/narcissus\"}]\n        },\n        {\n          title: \"Dead bug color organ\",\n          image: color_organ,\n          intro: \"A dead bug style analog color organ built to combat the boredom of quarantine\",\n          links: [{text: \"Inspiration\", url: \"https://www.instructables.com/id/LED-Color-Organ-Triple-Deluxe/\"}, {text: \"Instagram\", url: \"https://www.instagram.com/p/B-pTLsSF2cb/\"}]\n        },\n        {\n          title: \"Folding desk\",\n          image: folding_desk,\n          intro: \"A home built folding desk/tv shelf for these trying times and more\",\n          links: [{text: \"Instagram\", url: \"https://www.instagram.com/p/B-c9dOrlxzt/\"}]\n        },\n        {\n          title: \"Playlist from chat history\",\n          image: playlist,\n          intro: \"A very quick and dirty hack to make a Spotify playlist from all the songs mentioned in a facebook chat\",\n          links: [{text: \"Playlist\", url: \"https://open.spotify.com/user/dr.lexa/playlist/7DdH0Ogd8plJ0UEUc3KsfL?si=ZAdXPMTERBaNSlGELHG4TA\"}, {text: \"Source\", url: \"https://github.com/Demborg/messenger-parsing\"}]\n        },\n        {\n          title: \"This very website\", \n          image: this_very_website, \n          intro: \"Continuing to learn frontend by building myself a little portfolio page\", \n          links: [{text: \"Try\", url: \"https://demborg.se/\"}, {text: \"Source\", url: \"https://github.com/Demborg/demborg.github.io\"}]\n        },\n        {\n          title: \"Sju Ã¥rs lycka\", \n          image: sju_ars_lycka, \n          intro: \"Performing (very mild) civil disobedience by decorating a subway station with mirrors\", \n          links: [{text: \"Instagram\", url: \"https://www.instagram.com/p/B3hWzMuFEOh/\"}]\n        },\n        {\n          title: \"CPPN\",\n          image: cppn,\n          intro: \"Generative art implemented in tensorflowJS\",\n          links: [{text: \"Try\", url: \"https://demborg.se/cppn/\"}, {text: \"Source\", url: \"https://github.com/Demborg/cppn\"}]\n        },\n        {\n          title: \"Worst raytracer\",\n          image: raytrace,\n          intro: \"Building the worlds worst raytracer from scratch in Python\",\n          links: [{text: \"Source\", url: \"https://github.com/Demborg/raytrace\"}]\n        },\n        ]}/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}