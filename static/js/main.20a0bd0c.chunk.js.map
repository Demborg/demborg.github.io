{"version":3,"sources":["img/avatar.jpg","img/cppn.png","img/sju_ars_lycka.jpg","img/raytrace.png","img/neon.jpg","img/this_very_website.png","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Header","className","src","avatar","alt","React","Component","Card","this","props","title","image","intro","tags","map","tag","Grid","posts","post","App","this_very_website","sju_ars_lycka","cppn","raytrace","neon","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qHAAAA,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,2C,gBCA3CD,EAAOC,QAAU,IAA0B,sC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,+C,8QCoBrCC,E,iLAEF,OACA,yBAAKC,UAAU,yCACb,yBAAKA,UAAU,mDAAmDC,IAAKC,IAAQC,IAAI,KACnF,yBAAKH,UAAU,mEAAf,qB,GALeI,IAAMC,WAWrBC,E,iLACO,IAAD,EAC4BC,KAAKC,MAAlCC,EADC,EACDA,MAAOC,EADN,EACMA,MAAOC,EADb,EACaA,MAAOC,EADpB,EACoBA,KAC5B,OACE,yBAAKZ,UAAU,qCACb,yBAAKA,UAAU,SAASC,IAAKS,EAAOP,IAAKO,IACzC,yBAAKV,UAAU,aACb,yBAAKA,UAAU,0BAA0BS,GACzC,uBAAGT,UAAU,2BACVW,IAGL,yBAAKX,UAAU,aACZY,EAAKC,KAAI,SAAAC,GAAG,OAAI,0BAAMd,UAAU,4FAA4Fc,Y,GAbpHV,IAAMC,WAoBnBU,E,iLACO,IACFC,EAAST,KAAKC,MAAdQ,MACP,OACE,yBAAKhB,UAAU,kBACZgB,EAAMH,KACL,SAAAI,GAAI,OACN,yBAAKjB,UAAU,iEACb,kBAAC,EAAD,CAAMS,MAAOQ,EAAKR,MAAOC,MAAOO,EAAKP,MAAOC,MAAOM,EAAKN,MAAOC,KAAMK,EAAKL,gB,GARjER,IAAMC,WA+BVa,EAfO,WACpB,OACE,yBAAKlB,UAAU,qBACb,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAMgB,MAAO,CACX,CAACP,MAAO,oBAAqBC,MAAOS,IAAmBR,MAAO,0EAA2EC,KAAM,CAAC,WAChJ,CAACH,MAAO,mBAAiBC,MAAOU,IAAeT,MAAO,wFAAyFC,KAAM,CAAC,cAAe,WACrK,CAACH,MAAO,OAAQC,MAAOW,IAAMV,MAAO,6CAA8CC,KAAM,CAAC,YAAa,WACtG,CAACH,MAAO,kBAAmBC,MAAOY,IAAUX,MAAO,6DAA8DC,KAAM,CAAC,YAAa,WACrI,CAACH,MAAO,OAAQC,MAAOa,IAAMZ,MAAO,mCAAoCC,KAAM,CAAC,cAAe,cChElFY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.20a0bd0c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/avatar.d50c9485.jpg\";","module.exports = __webpack_public_path__ + \"static/media/cppn.4ce37009.png\";","module.exports = __webpack_public_path__ + \"static/media/sju_ars_lycka.d8a56cce.jpg\";","module.exports = __webpack_public_path__ + \"static/media/raytrace.b7face0f.png\";","module.exports = __webpack_public_path__ + \"static/media/neon.cfcaa520.jpg\";","module.exports = __webpack_public_path__ + \"static/media/this_very_website.a79701fe.png\";","import React from 'react';\nimport avatar from './img/avatar.jpg'\nimport cppn from './img/cppn.png'\nimport sju_ars_lycka from './img/sju_ars_lycka.jpg'\nimport raytrace from './img/raytrace.png'\nimport neon from './img/neon.jpg'\nimport this_very_website from './img/this_very_website.png'\n\ninterface Post {\n  title: string;\n  image: string;\n  intro: string;\n  body?: string;\n  tags: string[];\n}\n\ninterface Page {\n  posts: Post[];\n}\n\nclass Header extends React.Component {\n  render () {\n    return (\n    <div className=\"bg-gray-800 overflow-hidden shadow-lg\">\n      <img className=\"inline-block text-gray-700 rounded-full w-20 m-4\" src={avatar} alt=\"\"/>\n      <div className=\"inline-block text-3xl text-gray-300 font-semibold px-4 py-2 m-2\">Axel Demborg</div>\n    </div>\n    )\n  }\n}\n\nclass Card extends React.Component<Post, {}> {\n  render () {\n    const {title, image, intro, tags} = this.props;\n    return (\n      <div className=\"rounded overflow-hidden shadow-lg\">\n        <img className=\"w-full\" src={image} alt={image}/>\n        <div className=\"px-6 py-4\">\n          <div className=\"font-bold text-xl mb-2\">{title}</div>\n          <p className=\"text-gray-700 text-base\">\n            {intro}\n          </p>\n        </div>\n        <div className=\"px-6 py-4\">\n          {tags.map(tag => <span className=\"inline-block bg-gray-200 rounded-full px-3 py-1 text-sm font-semibold text-gray-700 mr-2\">{tag}</span>)}\n        </div>\n      </div>\n    )\n  }\n}\n\nclass Grid extends React.Component<Page, {}> {\n  render () {\n    const {posts} = this.props\n    return (\n      <div className=\"flex flex-wrap\">\n        {posts.map(\n          post => \n        <div className=\"w-full sm:w-1/2 md:w-1/2 lg:w-1/3 xl:w-1/4 mb-4 hover:p-2 p-4\">\n          <Card title={post.title} image={post.image} intro={post.intro} tags={post.tags}/>\n        </div>\n          )}\n      </div>\n    )\n  }\n}\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"container mx-auto\">\n      <Header/>\n      <Grid posts={[\n        {title: \"This very webside\", image: this_very_website, intro: \"Continuing to learn frontend by building myself a little portfolio page\", tags: [\"Coding\"]},\n        {title: \"Sju Ã¥rs lycka\", image: sju_ars_lycka, intro: \"Performing (very mild) civil disobedience by decorating a subway station with mirrors\", tags: [\"Photography\", \"Mirror\"]},\n        {title: \"CPPN\", image: cppn, intro: \"Generative art implemented in tensorflowJS\", tags: [\"Rendering\", \"Coding\"]},\n        {title: \"Worst raytracer\", image: raytrace, intro: \"Building the worlds worst raytracer from scratch in Python\", tags: [\"Rendering\", \"Coding\"]},\n        {title: \"Neon\", image: neon, intro: \"Feeling cute, might delete later\", tags: [\"Photography\", \"NSFW\"]}\n        ]}/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}